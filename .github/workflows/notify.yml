name: Notify Workflow

on:
  workflow_run:
    workflows: ['Build Workflow', 'Tests Workflow']
    types:
      - completed

permissions:
  contents: read
  actions: read

concurrency:
  group: notify-${{ github.ref }}
  cancel-in-progress: true

jobs:
  notify:
    name: Notify when both workflows succeed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check other workflow runs for this SHA
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          set -e
          echo "Checking workflow runs for repo: $REPO and head_sha: $HEAD_SHA"

          # helper to query runs and pick the one matching workflow name + head_sha
          get_conclusion() {
            workflow_name="$1"
            runs_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/runs?per_page=100")
            echo "$runs_json" | jq -r --arg name "$workflow_name" --arg sha "$HEAD_SHA" '.workflow_runs[] | select(.name==$name and .head_sha==$sha) | .conclusion' | head -n1
          }

          get_run_id() {
            workflow_name="$1"
            runs_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/runs?per_page=100")
            echo "$runs_json" | jq -r --arg name "$workflow_name" --arg sha "$HEAD_SHA" '.workflow_runs[] | select(.name==$name and .head_sha==$sha) | .id' | head -n1
          }

          TESTS_STATUS=$(get_conclusion "Tests Workflow" || true)
          BUILD_STATUS=$(get_conclusion "Build Workflow" || true)

          both_succeeded=false
          if [ "$TESTS_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ]; then
            both_succeeded=true
          fi

          # find artifact download url from the build run if present
          BUILD_RUN_ID=$(get_run_id "Build Workflow" || true)
          BUILD_ARTIFACT_URL=""
          if [ -n "$BUILD_RUN_ID" ] && [ "$BUILD_RUN_ID" != "null" ]; then
            artifacts_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/runs/$BUILD_RUN_ID/artifacts")
            BUILD_ARTIFACT_URL=$(echo "$artifacts_json" | jq -r '.artifacts[] | select(.name=="build-package") | .archive_download_url' | head -n1 || true)
          fi

          echo "both_succeeded=$both_succeeded" >> $GITHUB_OUTPUT
          echo "tests_status=$TESTS_STATUS" >> $GITHUB_OUTPUT
          echo "build_status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "build_artifact_url=$BUILD_ARTIFACT_URL" >> $GITHUB_OUTPUT

      - name: Install runtime dependencies
        if: steps.check.outputs.both_succeeded == 'true' && steps.check.outputs.build_artifact_url != ''
        run: |
          echo "Installing project dependencies so notifier can run"
          npm ci

      - name: Download build artifact and run notifier
        if: steps.check.outputs.both_succeeded == 'true' && steps.check.outputs.build_artifact_url != ''
        env:
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          TESTS_STATUS: ${{ steps.check.outputs.tests_status }}
          BUILD_STATUS: ${{ steps.check.outputs.build_status }}
        run: |
          echo "Downloading build artifact"
          curl -L -o package.tar.gz "${{ steps.check.outputs.build_artifact_url }}"
          mkdir -p package && tar -xzf package.tar.gz -C package
          echo "Running notifier from package/dist/scripts/sendNotificationCli.js"
          node package/dist/scripts/sendNotificationCli.js
